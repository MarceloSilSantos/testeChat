Criar uma aplicação web simples para um chat usando Spring Boot, MySQL e React com Vite envolve algumas etapas principais. Vou te guiar através do processo básico.

Passo 1: Configuração do Backend com Spring Boot
Criar um Novo Projeto Spring Boot

Use o Spring Initializr para criar um novo projeto.
Escolha as dependências:
Spring Web
Spring Data JPA
MySQL Driver
Spring Boot DevTools (opcional, para desenvolvimento)
Configuração do application.properties No arquivo src/main/resources/application.properties, adicione as configurações do MySQL:


spring.datasource.url=jdbc:mysql://localhost:3306/chat_db
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true


//classe Message

@Entity
public class Message {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String user;
    private String content;
    private LocalDateTime timestamp;

    // Getters e Setters
}


//MessageController


@RestController
@RequestMapping("/api/messages")
public class MessageController {

    @Autowired
    private MessageRepository messageRepository;

    @GetMapping
    public List<Message> getAllMessages() {
        return messageRepository.findAll();
    }

    @PostMapping
    public Message createMessage(@RequestBody Message message) {
        message.setTimestamp(LocalDateTime.now());
        return messageRepository.save(message);
    }
}


//create a DB

CREATE DATABASE chat_db;


//

Passo 3: Configuração do Frontend com React e Vite
Criar um Novo Projeto React com Vite Execute o seguinte comando no terminal:


npm create vite@latest chat-frontend --template react
cd chat-frontend
npm install


npm install axios



//src - Chat.jsx

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Chat = () => {
    const [messages, setMessages] = useState([]);
    const [user, setUser] = useState('');
    const [content, setContent] = useState('');

    useEffect(() => {
        fetchMessages();
    }, []);

    const fetchMessages = async () => {
        const response = await axios.get('/api/messages');
        setMessages(response.data);
    };

    const sendMessage = async () => {
        await axios.post('/api/messages', { user, content });
        setContent('');
        fetchMessages();
    };

    return (
        <div>
            <div>
                {messages.map(msg => (
                    <div key={msg.id}>
                        <strong>{msg.user}</strong>: {msg.content}
                    </div>
                ))}
            </div>
            <input
                type="text"
                value={user}
                onChange={e => setUser(e.target.value)}
                placeholder="Seu nome"
            />
            <input
                type="text"
                value={content}
                onChange={e => setContent(e.target.value)}
                placeholder="Mensagem"
            />
            <button onClick={sendMessage}>Enviar</button>
        </div>
    );
};

export default Chat;


//usar o componente no conteúdo de App.jsx


import React from 'react';
import Chat from './Chat';

function App() {
    return (
        <div className="App">
            <h1>Chat Simples</h1>
            <Chat />
        </div>
    );
}

export default App;








// executar o back e o front

./mvnw spring-boot:run
npm run dev



Considerações Finais
Certifique-se de que o backend e o frontend estejam na mesma rede, ou configure o CORS no Spring Boot se necessário.
Você pode expandir essa aplicação adicionando autenticação, persistência mais complexa, suporte a múltiplos usuários, etc.

